#!/usr/bin/env python
"""
Usage:
    znappy [--help] [--debug] <command> [<args>...]

Options:
    -?, --help   This help message
    -d, --debug  enable debug output

Commands:
    agent        Run the snapshot agent
    snapshot     Snapshot management
    config       Manage cluster configuration
    cluster      Cluster orchestration utils
    monitor      Monitor znappy health

See 'znappy <command> --help' for more information on a specific command
"""

from znappy import keyvalue, models
from znappy.utils import local_config
from docopt import docopt
import logging
import importlib

logging.basicConfig(format="%(asctime)s [%(name)-24.24s] [%(funcName)-16.16s] [%(levelname)-8.8s] %(message)s")
logging.getLogger('urllib3.connectionpool').setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

if __name__ == "__main__":
    args = local_config(docopt(__doc__, options_first=True))

    logging.getLogger().setLevel(args['--log-level'])

    if args['--debug']:
        logging.getLogger().setLevel(logging.DEBUG)

    # Don't even try to do anything if we don't have a cluster name
    if not args['--cluster']:
        logger.critical('No cluster name provided!')
        exit(1)

    if args['<command>'] == "help":
        # we need this because help requires an argument but is not a real package
        if args['<args>'] is not []:
            # print __doc__ would work too..
            print(docopt(__doc__, argv=['znappy', '--help']))
            exit(0)

        argv = args['<args>'] + ['--help']
    else:
        argv = [args['<command>']] + args['<args>']

    db = keyvalue.KeyValue(
        host=args.get('--consul-host', 'localhost'),
        port=int(args.get('--consul-port', 8500))
    )

    try:
        logger.debug('executing command {}'.format(argv[0]))
        command = importlib.import_module('znappy.command.{}'.format(argv[0]))
    except ImportError, e:
        # this is not a 100% accurate, it could be that a command imports other deps which fail, still good
        # enough for now
        logger.fatal('command {} not found'.format(argv[0]))
        logger.fatal(e)
        exit(127)
    except Exception, e:
        logger.warn(e)
        exit(255)

    with db:
        models.db = db
        args = local_config(docopt(command.__doc__, argv=argv))
        command.main(db, args)
