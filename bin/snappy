#!/usr/bin/env python
"""
Usage:
    snappy [--config=<file>] [--help] [--debug] <command> [<args>...]

Options:
    -c=<file>, --config=<file>  Configuration file to use [default: config-sample.yaml]
    -h, --help                  Display this help
    -d, --debug                 enable debug output

Commands:
    agent       Run the snapshot agent
    snapshot    Snapshot management

See 'snappy help <command>' for more information on a specific command
"""

from snappy import keystore, lockagent, utils
from docopt import docopt
import logging
import importlib

if __name__ == "__main__":
    args = docopt(__doc__, options_first=True)

    if args['<command>'] == "help":
        # we need this because help requires an argument but is not a real package
        if args['<args>'] is not []:
            # print __doc__ would work too..
            print(docopt(__doc__, argv=['snappy', '--help']))
            exit(0)

        argv = args['<args>'] + ['--help']
    else:
        argv = [args['<command>']] + args['<args>']

    utils.load_config(args['--config'])

    if args['--debug']:
        level = logging.DEBUG
    else:
        level = utils.config.get('logging', {}).get('level', logging.INFO)

    logging.basicConfig(
        format="%(asctime)s [%(name)-24.24s] [%(funcName)-16.16s] [%(levelname)-8.8s] %(message)s",
        level=level
    )

    #logging.getLogger('urllib3.connectionpool').setLevel(logging.WARNING)

    logger = logging.getLogger(__name__)

    logger.debug(utils.config)

    try:
        logger.debug('executing command {}'.format(argv[0]))
        command = importlib.import_module('snappy.command.{}'.format(argv[0]))
    except ImportError:
        # this is not a 100% accurate, it could be that a command imports other deps which fail, still good
        # enough for now
        logger.fatal('command {} not found'.format(argv[0]))
        exit(127)
    except Exception, e:
        logger.debug(e)
        exit(255)

    with keystore.get(*utils.config['keystore']) as ks, \
         lockagent.get(*utils.config['lockagent']) as la:
        
        command.main(ks, la, docopt(command.__doc__, argv=argv))
