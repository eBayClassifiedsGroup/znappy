#!/usr/bin/env python
"""
Usage:
    snappy [--host=<host>] [--port=<port>] [--help] [--debug] <command> [<args>...]

Options:
    -?, --help                  This help message
    -h=<host>, --host=<host>    Consul agent to connect to [default: localhost]
    -p=<port>, --port=<port>    Consul agent port to connect to [default: 8500]
    -d, --debug                 enable debug output

Commands:
    agent       Run the snapshot agent
    snapshot    Snapshot management
    bootstrap   Bootstrap a cluster
    register    register a machine to the cluster

See 'snappy help <command>' for more information on a specific command
"""

from snappy import keyvalue, models
from snappy.utils import config, load_config
from docopt import docopt
import logging, logging.handlers
import importlib

logging.basicConfig(format="%(asctime)s [%(name)-24.24s] [%(funcName)-16.16s] [%(levelname)-8.8s] %(message)s")
logging.getLogger('urllib3.connectionpool').setLevel(logging.WARNING)

logger = logging.getLogger(__name__)
logger.addHandler(logging.handlers.SysLogHandler(address='/dev/log'))

if __name__ == "__main__":
    args = docopt(__doc__, options_first=True)

    if args['<command>'] == "help":
        # we need this because help requires an argument but is not a real package
        if args['<args>'] is not []:
            # print __doc__ would work too..
            print(docopt(__doc__, argv=['snappy', '--help']))
            exit(0)

        argv = args['<args>'] + ['--help']
    else:
        argv = [args['<command>']] + args['<args>']

    db = keyvalue.KeyValue(host=args['--host'], port=args['--port'])

    if args['--debug']:
        level = logging.DEBUG
    else:
        level = logging.INFO

    # TODO move this to utils? or something
    logging.getLogger().setLevel(level)


    try:
        logger.debug('executing command {}'.format(argv[0]))
        command = importlib.import_module('snappy.command.{}'.format(argv[0]))
    except ImportError, e:
        # this is not a 100% accurate, it could be that a command imports other deps which fail, still good
        # enough for now
        logger.fatal('command {} not found'.format(argv[0]))
        logger.fatal(e)
        exit(127)
    except Exception, e:
        logger.debug(e)
        exit(255)

    with db:
        models.db = db

        config = load_config(db)

        logger.debug(config)

        command.main(db, docopt(command.__doc__, argv=argv))
